name: reusable docker

on:
  workflow_call:
    inputs:
      image-name: 
        description: Name of de Image
        required: false
        type: string
      context:
        description: Docker context (path) to start build from
        required: false
        type: string
      tag:
        description: Use docker-metadata action to create tags # https://github.com/marketplace/actions/docker-metadata-action#tags-input
        required: false
        type: string
        default: |
          type=raw,value=stable-{{date 'YYYYMMDD'}}-{{sha}},enable={{is_default_branch}},priority=300
          type=ref,event=tag,priority=200
          type=raw,value=latest,enable={{is_default_branch}},priority=100
          type=raw,value=gha-${{ github.run_id }},enable=${{github.event_name == 'pull_request'}},priority=200
          type=ref,event=pr,priority=100
      ecr-enable:
        description: Log into ECR registry
        required: false
        type: boolean
        default: false
      aws-region:
        description: AWS Region to use on registry
        required: false
        type: string
        default: eu-north-1
      role-to-assume:
        description: Role to assume
        required: false
        type: string
      dockerhub-enable:
        description: Log into Docker Hub
        required: false
        type: boolean
        default: false
      push:
        description: Push image to registry
        required: false
        type: boolean
        default: true
      platforms:
        description: Platforms to build for
        required: false
        type: string
        default: linux/amd64 # common ones: linux/amd64,linux/arm64,linux/arm/v7
     
    secrets:
      dockerhub-username:
        description: Docker Hub username
        required: false
      dockerhub-token:
        description: Docker Hub token
        required: false
      ecr-repo-name:
        description: ECR Repository name
        required: false

permissions:
  contents: read
  packages: write 
  pull-requests: write 


jobs:
  build-image:
    name: Build and Push
    runs-on: ubuntu-latest
    
    steps:
      - 
        name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3.0.0
      -
        name: Checkout
        uses: actions/checkout@v3
      - 
        name: Configure aws credentials
        if: inputs.ecr-enable
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ inputs.role-to-assume }}
          aws-region: ${{ inputs.aws-region }}
      - 
        name: Login to Amazon ECR
        if: inputs.ecr-enable
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - 
        name: Build, tag, and push the image to Amazon ECR
        if: inputs.ecr-enable
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ecr-repo-name }}
          IMAGE_TAG: latest
        run: |
          # Build a docker container and push it to ECR 
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      - 
        name: Login to Docker Hub
        if: inputs.dockerhub-enable
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ secrets.dockerhub-username }}
          password: ${{ secrets.dockerhub-token }}    
      - 
        name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v5.0.0
        with:
          images: ${{ inputs.image-name }}
          flavor: ${{ inputs.flavor-rules }}
          tags: ${{ inputs.tag }}
      - 
        name: Docker Build and Push
        if: inputs.dockerhub-enable
        id: build_image
        uses: docker/build-push-action@v5.0.0
        with:
          platforms: ${{ inputs.platforms }}
          context: ${{ inputs.context }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: ${{ inputs.push }}
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}

      
